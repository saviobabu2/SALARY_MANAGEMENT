<body>
    <div class="wrapper">
        <div class="content">
            <header class="admin-header">
                Staff Hours Management
            </header>

            <main>
                <section class="staff-hours-section">
                    <h2>Update Daily Working Hours</h2>
                    <div class="staff-table-container">
                        <table class="staff-table">
                            <thead>
                                <tr>
                                    <th>Staff Name</th>
                                    <th>Position</th>
                                    <th>Current Month Hours (<%= currentMonthYear %>)</th>
                                    <th>Add Hours Today</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (staffList && staffList.length > 0) { %>
                                    <% staffList.forEach(function(staff) { %>
                                        <tr data-staff-id="<%= staff._id %>">
                                            <td><%= staff.name %></td>
                                            <td><%= staff.position %></td>
                                            <td><%= staff.monthlyHours.totalHoursWorked.toFixed(2) %></td>
                                            <td>
                                                <input type="number" step="0.01" min="0" class="hours-input" id="hours_<%= staff._id %>" placeholder="e.g., 8.5">
                                            </td>
                                            <td>
                                                <button class="update-hours-btn" data-id="<%= staff._id %>">
                                                    <i class="fas fa-clock"></i> Update Hours
                                                </button>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="5" class="no-staff-message">No staff members found.</td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </section>
            </main>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.update-hours-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const staffId = e.currentTarget.dataset.id;
                    const hoursInput = document.getElementById(`hours_${staffId}`);
                    // Use .value.trim() to remove leading/trailing whitespace
                    const inputValue = hoursInput.value.trim();
                    const hoursToAdd = parseFloat(inputValue);

                    // Refined frontend validation messages
                    if (inputValue === '') { // Check for empty string specifically
                        alert('Please enter hours to add.');
                        hoursInput.focus(); // Keep focus on the input
                        return;
                    }
                    if (isNaN(hoursToAdd) || hoursToAdd <= 0) { // Check for invalid number or non-positive
                        alert('Please enter a valid positive number for hours (e.g., 8.5).');
                        hoursInput.value = ''; // Clear input on error
                        hoursInput.focus();
                        return;
                    }

                    try {
                        // **** THE KEY CHANGE IS HERE ****
                        // Changed from `/admin/api/staff/...` to `/admin/staff/...`
                        // because `app.use('/admin', adminRoutes);` handles the /admin part.
                        const response = await fetch(`/admin/staff/${staffId}/update-hours`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                                // If you are using CSRF tokens, ensure they are sent here.
                                // E.g., 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                            },
                            body: JSON.stringify({ hoursToAdd: hoursToAdd }) // hoursToAdd is correctly a number here
                        });

                        // Check if the HTTP response status is OK (200-299)
                        if (!response.ok) {
                            // If response is not OK, it's an error from the server.
                            // Attempt to parse the error message from the JSON body.
                            const errorData = await response.json();
                            // Throw an error to be caught by the outer catch block
                            // Prioritize backend message, fall back to generic HTTP status text
                            throw new Error(errorData.message || response.statusText || 'Server responded with an error.');
                        }

                        // If response.ok is true, parse the successful JSON result
                        const result = await response.json();

                        // 'result.success' reflects the server's business logic success
                        if (result.success) {
                            alert(result.message);
                            // Update the displayed hours without a full page reload
                            const row = e.currentTarget.closest('tr');
                            // Ensure the index [2] is correct for totalHoursWorked column
                            if (row && row.children[2]) {
                                row.children[2].textContent = result.newTotalHours.toFixed(2);
                            }
                            hoursInput.value = ''; // Clear input field
                        } else {
                            // This block handles cases where server sends 200 OK but 'success: false'
                            alert('Error: ' + (result.message || 'An unknown error occurred during update.'));
                        }
                    } catch (error) {
                        // This catch block will now receive network errors OR
                        // errors explicitly thrown by our 'if (!response.ok)' check.
                        console.error('Error updating staff hours:', error);
                        alert('An unexpected error occurred: ' + error.message);
                    }
                });
            });
        });
    </script>
</body>